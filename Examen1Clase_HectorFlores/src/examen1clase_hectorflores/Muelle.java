/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package examen1clase_hectorflores;

import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author hecto
 */
public class Muelle extends javax.swing.JFrame {

    /**
     * Creates new form Muelle
     */
    public Muelle() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        agregarBarco = new javax.swing.JButton();
        agregarElemento = new javax.swing.JToggleButton();
        vaciarBarco = new javax.swing.JButton();
        barcosDesde = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Muelle:");

        agregarBarco.setText("Agregar Barco");
        agregarBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBarcoActionPerformed(evt);
            }
        });

        agregarElemento.setText("Agregar Elemento");
        agregarElemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarElementoActionPerformed(evt);
            }
        });

        vaciarBarco.setText("Vaciar Barco");
        vaciarBarco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaciarBarcoActionPerformed(evt);
            }
        });

        barcosDesde.setText("Listar Barcos desde fecha");
        barcosDesde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcosDesdeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(barcosDesde)
                    .addComponent(jLabel1)
                    .addComponent(agregarBarco)
                    .addComponent(agregarElemento)
                    .addComponent(vaciarBarco))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agregarBarco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregarElemento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vaciarBarco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barcosDesde)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ArrayList<Barco> barcos;
    
    public boolean isUnico (String nombre){
        for (int i = 0; i < barcos.size(); i++) {
            if (barcos.get(i).getNombre().equalsIgnoreCase(nombre)){
                return false;
            }
        }
        
        return true;
    }
    
    public void AgregarBarco(String tipo){
        if (tipo.equalsIgnoreCase("pesquero")){
            
            String nombre = JOptionPane.showInputDialog(null, "Ingrese el nombre del barco");
            
            if (isUnico(nombre)){
                
                String quePesca = JOptionPane.showInputDialog("Que pesca este barco?");
                
                if (quePesca.equalsIgnoreCase("pez")){
                    BarcoPesquero nuevoBarco = new BarcoPesquero(nombre, TipoPesquero.PEZ);
                } else if (quePesca.equalsIgnoreCase("camaron")){
                    BarcoPesquero nuevoBarco = new BarcoPesquero(nombre, TipoPesquero.CAMARON);
                } else if (quePesca.equalsIgnoreCase("langosta")){
                    BarcoPesquero nuevoBarco = new BarcoPesquero(nombre, TipoPesquero.LANGOSTA);
                } else {
                    JOptionPane.showMessageDialog(null, quePesca + " no es una opcion.\nIngrese pez, camaron o langosta");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre del barco ya existe");
            }
        } else if (tipo.equalsIgnoreCase("pasajero")){
            String nombre = JOptionPane.showInputDialog(null, "Ingrese el nombre del barco");
            
            if (isUnico(nombre)){
                
                try {
                    int max = Integer.parseInt(JOptionPane.showInputDialog("Cual es el maximo de pasajeros del barco?"));
                    double precioBoleto = Double.parseDouble(JOptionPane.showInputDialog("Cual es el precio del boleto?"));
                    
                    BarcoPasajero nuevoBarco = new BarcoPasajero(nombre, max, precioBoleto);
                    
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, "Verifique que haya ingresado datos validos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre del barco ya existe");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese solamente pequero o pasajero");
        }
    }
    
    private void agregarBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBarcoActionPerformed
        String tipo = JOptionPane.showInputDialog("Desea agregar un parco pesquero o pasajero?");
        
        AgregarBarco(tipo);
    }//GEN-LAST:event_agregarBarcoActionPerformed

    public Barco targetBarco(String nombre){
        for (int i = 0; i < barcos.size(); i++) {
            if (barcos.get(i).getNombre().equalsIgnoreCase(nombre)){
                return barcos.get(i);
            }
        }
        
        return null;
    }
    
    public void AgregarElemento(String nombre){
        if (isUnico(nombre)){
            
            if (targetBarco(nombre) instanceof BarcoPesquero){
                BarcoPesquero target = (BarcoPesquero)targetBarco(nombre);
                target.agregarElemento();
            } else {
                BarcoPasajero target = (BarcoPasajero)targetBarco(nombre);
                target.agregarElemento();
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "Ese barco no existe");
        }
    }
    
    
    private void agregarElementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarElementoActionPerformed
        String nombre = JOptionPane.showInputDialog(null, "Ingrese el nombre del barco");
        
        AgregarElemento(nombre);
    }//GEN-LAST:event_agregarElementoActionPerformed

    
    public void VaciarBarco(String nombre){
        if (isUnico(nombre)){
            
            targetBarco(nombre).vaciarCobrar();
            
        } else {
            JOptionPane.showMessageDialog(null, "Ese barco no existe");
        }
    }
    
    private void vaciarBarcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vaciarBarcoActionPerformed
        String nombre = JOptionPane.showInputDialog(null, "Ingrese el nombre del barco");
        
        VaciarBarco(nombre);
    }//GEN-LAST:event_vaciarBarcoActionPerformed

    private void BarcosDesde(int year, ArrayList <Barco> barcos, int pos){
        if (pos < barcos.size()){
            if (barcos.get(pos).getCirculacion().get(Calendar.YEAR) >= year){
                JOptionPane.showMessageDialog(null, barcos.get(pos).toString());
                BarcosDesde(year, barcos, pos + 1);
            }
        } 
    }
    
    public void BarcosDesde (int year){
        BarcosDesde(year, barcos, 0);
    }
    
    private void barcosDesdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcosDesdeActionPerformed
        try {
            int year = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el año desde el cual desea listar los barcos"));
            
            BarcosDesde(year);
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Ingrese un año valido");
        }
    }//GEN-LAST:event_barcosDesdeActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Muelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Muelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Muelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Muelle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Muelle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBarco;
    private javax.swing.JToggleButton agregarElemento;
    private javax.swing.JButton barcosDesde;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton vaciarBarco;
    // End of variables declaration//GEN-END:variables
}
